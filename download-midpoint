#!/bin/bash

DIR=`dirname "$0"`
source $DIR/common.bash
if [[ -n "$1" ]]; then
  MP_VERSION=$1
else
  MP_VERSION=$tag
fi

fileName=${2:-"midpoint-dist-${MP_VERSION}.tar.gz"}
dry_run=${3:-0}
groupId="com.evolveum.midpoint"
artifactId="dist"
classifier="-dist"
type="tar.gz"
base="https://nexus.evolveum.com/nexus/repository"
groupIdUrl="${groupId//.//}"
filename="${artifactId}-${MP_VERSION}${classifier}.${type}"

MP_VER=""
l_MP_VER=""
URL=""

# check "known" versions from map_midpoint-docker.csv file
MP_VER=$(grep "^${MP_VERSION}," $DIR/map_midpoint-docker.csv | cut -d "," -f 2)
repo=$(grep "^${MP_VERSION}," $DIR/map_midpoint-docker.csv | cut -d "," -f 3)

if [ "${MP_VER}" != "" ]
then
	echo "Found in map_midpoint-docker.csv - ${MP_VER} @ ${repo}"
else
	if [ $(curl -s https://nexus.evolveum.com/nexus/repository/releases/com/evolveum/midpoint/dist/maven-metadata.xml | grep "<version>" | sed "s|[^>]*>\([^<]*\)<.*|\1|" | grep "^${MP_VERSION}\$" | wc -l) -eq 1 ]
	then
		MP_VER="${MP_VERSION}"
		repo="releases"
		echo "Found in the list of releases on nexus - ${MP_VER} @ ${repo}"
	fi
fi

if [[ "${repo}" == "releases" ]] ; then
    URL="${base}/releases/${groupIdUrl}/${artifactId}/${MP_VER}/${artifactId}-${MP_VER}${classifier}.${type}"

    echo "Nexus: ${MP_VER} (release)" >$DIR/${fileName}.info
  else if [[ "${MP_VERSION}" != "latest" ]] ; then
    l_repo="releases"
    l_MP_VER=$(curl -k -s ${base}/${l_repo}/${groupIdUrl}/${artifactId}/maven-metadata.xml | grep "<version>" | sed "s/.*<version>\([^<]*\)<\/version>/\1/" | grep "^${MP_VERSION}$" | tail -1)
    [[ "${l_MP_VER}" == "" ]] && \
	l_MP_VER=$(curl -k -s ${base}/${l_repo}/${groupIdUrl}/${artifactId}/maven-metadata.xml | grep "<version>" | sed "s/.*<version>\([^<]*\)<\/version>/\1/" | grep "^${MP_VERSION}" | grep -v "\-M" | tail -1)
    if [[ "${l_MP_VER}" != "" ]] ; then
      URL="${base}/${l_repo}/${groupIdUrl}/${artifactId}/${l_MP_VER}/${artifactId}-${l_MP_VER}${classifier}.${type}"

      echo "Nexus: ${l_MP_VER} (release)" >$DIR/${fileName}.info
    fi
  fi
fi

if [[ "${URL}" == "" ]] ; then
  l_repo="${repo:-snapshots}"
  if [[ "${MP_VERSION}" == "latest" ]] && [[ "${MP_VER}" == "" ]] ; then
	  echo "latest version have to be listed in the map_midpoint-docker.csv !" >&2
	  echo "maven-metadata.xml pointing to the last updated artefact (e.g. build of support branch) and not the latest version." >&2
	  exit 1
#	  MP_VER=$(xmllint --xpath "string(//latest)" <(curl -k -s "${base}/${l_repo}/${groupIdUrl}/${artifactId}/maven-metadata.xml"))
  else
	  if [[ "${MP_VER}" != "" ]] ; then
		  l_MP_VER="${MP_VER}"
	  else
		  l_MP_VER=$(curl -k -s ${base}/${l_repo}/${groupIdUrl}/${artifactId}/maven-metadata.xml | grep "<version>" | sed "s/.*<version>\([^<]*\)<\/version>/\1/" | grep "^${MP_VERSION}$" | tail -1)
	  # fall back to provided value... If nothing found we can try directly provided version - in the worst case the URL will not be build up...
	  [[ "${l_MP_VER}" == "" ]] && l_MP_VER=${MP_VERSION}
  	  fi
  fi
  if [ "${l_MP_VER}" != "" ] ; then
	  timestamp=$(xmllint --xpath "string(//timestamp)" <(curl -k -s "${base}/${l_repo}/${groupIdUrl}/${artifactId}/${l_MP_VER}/maven-metadata.xml"))
	  buildnumber=$(xmllint --xpath "string(//buildNumber)" <(curl -k -s "${base}/${l_repo}/${groupIdUrl}/${artifactId}/${l_MP_VER}/maven-metadata.xml"))
	  URL="${base}/${l_repo}/${groupIdUrl}/${artifactId}/${l_MP_VER}/${artifactId}-${l_MP_VER%-SNAPSHOT}-${timestamp}-${buildnumber}${classifier}.${type}"

	  echo "Nexus: ${l_MP_VER} (${timestamp} / ${buildnumber})" >$DIR/${fileName}.info
  fi
fi

if [[ "${URL}" == "" ]] ; then
  echo "Unknown tag"
  exit 1
fi

echo "Downloading midPoint $MP_VERSION (${fileName}) from $URL"
echo "--------------------------------------------------------------------"
[ ${dry_run} -eq 1 ] && exit 0
if [ -e $DIR/${fileName} ]
then
	curl -k -R --output $DIR/${fileName} --time-cond $DIR/${fileName} "$URL"
else
	curl -k -R --output $DIR/${fileName} "$URL"
fi
echo "-----------------------------------------"
echo "Checking the download..."
if tar -tf $DIR/${fileName} >/dev/null; then
  echo "OK"
  exit 0
else
  rm $DIR/${fileName}
  echo "The file was not downloaded correctly - downloaded data has been removed"
  exit 1
fi
