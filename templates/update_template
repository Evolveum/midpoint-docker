#!/bin/bash
app="docker"
repo="midpoint"
template_prefix="template"
registry="registry.lab.evolveum.com"
base_image=alpine
base_image_tag=latest
JAVA_VERSION=21
keep_template=0
dry_run=0
options=""
while [ "${1:0:1}" == "-" ]
do
	case ${1:1} in
		alpine)
			base_image=alpine
			base_image_tag=latest
			;;
		rockylinux)
			base_image=rockylinux
			base_image_tag=9.3
			;;
		ubuntu)
			base_image=ubuntu
			base_image_tag=22.04
			;;
		java)
			JAVA_VERSION=${2}
			shift
			;;
		baseImg)
			base_image="${2}"
			shift
			;;
		baseImgTag)
			base_image_tag="${2}"
			shift
			;;
		app)
			app="${2}"
			shift
			;;
		repo)
			repo="${2}"
			shift
			;;
		registry)
			registry="${2}"
			shift
			;;
		templatePrefix)
			template_prefix="${2}"
			shift
			;;
		d)
			dry_run=${2}
			shift
			;;
		k)
			keep_template=${2}
			shift
			;;
		all)
			echo " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
			echo " APP: ${app} | JAVA: ${JAVA_VERSION} | keep templates : ${keep_template} | DRY RUN : ${dry_run}"
			echo "  - - - - Rocky Linux - - - - - - - "  
			${0} -app ${app} -k ${keep_template} -d ${dry_run} -java ${JAVA_VERSION} -rockylinux
			echo " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
			echo " APP: ${app} | JAVA: ${JAVA_VERSION} | keep templates : ${keep_template} | DRY RUN : ${dry_run}"
			echo "  - - - - Ubuntu - - - - - - - "  
			${0} -app ${app} -k ${keep_template} -d ${dry_run} -java ${JAVA_VERSION} -ubuntu
			echo " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
			echo " APP: ${app} | JAVA: ${JAVA_VERSION} | keep templates : ${keep_template} | DRY RUN : ${dry_run}"
			echo "  - - - - Alpine - - - - - - - "  
			${0} -app ${app} -k ${keep_template} -d ${dry_run} -java ${JAVA_VERSION} -alpine
			echo " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
			exit 0
			;;
		*)
			echo "Unknown parameter : ${1:0}"
			;;	
	esac
	shift
done
timestamp="$(date +%s)";
image_name="localhost/${repo}:${template_prefix}-temp-${timestamp}"
if [ "${app}" == "podman" ]
then
	options="--format docker"
fi
cd .. 
echo "..... ${app} build ${options} --build-arg base_image=${base_image} --build-arg base_image_tag=${base_image_tag} --build-arg JAVA_VERSION=${JAVA_VERSION} -t ${image_name} -f templates/Dockerfile-template ."
${app} build ${options} --build-arg base_image=${base_image} --build-arg base_image_tag=${base_image_tag} --build-arg JAVA_VERSION=${JAVA_VERSION} -t ${image_name} -f templates/Dockerfile-template .
exec 3>&1 1>os-release-${timestamp}
${app} run -ti --rm ${image_name} cat /etc/os-release
exec 1>java-version-${timestamp}
${app} run -ti --rm ${image_name} java -version
exec >&3 

echo " - - - - - - - - -"
cat os-release-${timestamp}
echo " - - - -"
cat java-version-${timestamp}
echo " - - - - - - - - -"

os_id="$(grep "^ID=" os-release-${timestamp} | cut -d = -f 2 | tr -d [[:space:]]\" )"
if [ $(grep -c "^VERSION=" os-release-${timestamp}) -eq 1 ]
then
	os_version="$(grep "^VERSION=" os-release-${timestamp} | cut -d = -f 2 | cut -d \  -f 1 | tr -d [[:space:]]\" )"
else
	os_version="$(grep "^VERSION_ID=" os-release-${timestamp} | cut -d = -f 2 | cut -d \  -f 1 | tr -d [[:space:]]\" )"
fi
java_version="$(grep Runtime java-version-${timestamp} | sed "s/[^0-9]*\([0-9]*\).*/\1/")"
architecture="$(${app} inspect ${image_name} | grep Architecture | cut -d \" -f 4)"

if [ "${os_id}" == "" -o "${os_version}" == "" -o "${java_version}" == "" -o "${architecture}" == "" ]
then
	echo "Something went wrong. I am sorry, exiting..."
	exit 1
fi

[ "${os_id}" == "rocky" ] && os_id="rockylinux"

processed="OS: ${os_id}\nOS Version: ${os_version}\nJava: ${java_version}\nArch: ${architecture}\n\nProcessed:\n"

for s in ${os_id} ${os_id}-${os_version} ${os_id}-${os_version%.*}
do
	echo "Evaluating: ${s}"
	[ "${s: -1:1}" == "-" ] && continue
	echo "${image_name} => ${registry}/${repo}:${template_prefix}-${architecture}-${java_version}-${s}"
	${app} tag ${image_name} ${registry}/${repo}:${template_prefix}-${architecture}-${java_version}-${s}
	[ ${dry_run} -eq 0 ] && ${app} push ${registry}/${repo}:${template_prefix}-${architecture}-${java_version}-${s} 
	[ ${keep_template} -eq 0 ] && ${app} rmi ${registry}/${repo}:${template_prefix}-${architecture}-${java_version}-${s}
        processed="${processed}${registry}/${repo}:${template_prefix}-${architecture}-${java_version}-${s}\n"
done

echo " - - - - - - - - - - -"
echo -e "${processed}"
echo " - - - - - - - - - - -"

${app} rmi ${image_name} 
rm os-release-${timestamp} java-version-${timestamp}
[ ${keep_template} -eq 0 ] && ${app} system prune --volumes -a -f
